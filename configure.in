dnl For Queue for MySQL - a mysql pluggable storage engine
AC_INIT(src/ha_queue.cc)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(src/queue_config.h)
AM_INIT_AUTOMAKE("q4m", 0.1)

AC_PROG_CC
AC_PROG_CXX
AC_PROG_CPP
AC_PROG_GCC_TRADITIONAL
AC_PROG_LIBTOOL
LIBTOOL="$LIBTOOL --preserve-dup-deps"
AC_SUBST(LIBTOOL)

sinclude(config/ac_mysql.m4)
sinclude(config/ac_system.m4)
sinclude(config/dtrace.m4)

MYSQL_SRC_TEST
AC_SUBST(MYSQL_INC)

# We only support GCC and Sun's forte at the moment
if test "$GCC" = "yes"
then
  CXXFLAGS="$CXXFLAGS -fno-exceptions -fno-rtti"
else
  CFLAGS="-Xa -xstrconst -mt -D_FORTEC_ -fast -m64"
  CXXFLAGS="$CXXFLAGS -noex -mt -D_FORTEC_ -fast -m64"
  DTRACEFLAGS="-64"
fi

AC_ARG_WITH(debug,
    [   --with-debug            enable debugging, should match the configuration
                           used to compile mysql ],
    [
if test "$withval" = "yes"
then
    CFLAGS="$CFLAGS -g -DSAFE_MUTEX"
    CXXFLAGS="$CXXFLAGS -g -DSAFE_MUTEX"
fi
],
    [ with_debug=no ])

AC_ARG_WITH(sync,
    [   --with-sync=yes         commit to disk at checkpoints (default)
   --with-sync=no          do not commit explicitly to disk
   --with-sync=fsync       use fsync instead of fdatasync
   --with-sync=fcntl       use fcntl(F_FULLFSYNC) instead of fdatasync ],
    [  with_sync=$withval ],
    [ with_sync=yes ])
if test "$with_sync" = "yes"
then
    UNAME=`uname -s`
    if test "$UNAME" = "Darwin" ; then
        with_sync="fcntl"
    else
        with_sync="fdatasync"
    fi
fi
case "$with_sync" in
fcntl)
    AC_DEFINE([FDATASYNC_USE_FCNTL],1,[use fcntl for fdatasysnc])
    ;;
fsync)
    AC_DEFINE([FDATASYNC_USE_FSYNC],1,[use fsync instead of fdatasync])
    ;;
no)
    AC_DEFINE([FDATASYNC_SKIP],1,[do not sync at checkpoints])
    ;;
esac

AC_C_CONST
AC_TYPE_SIZE_T
AC_CHECK_HEADERS(limits.h syslimits.h)
AC_OUTPUT(Makefile src/Makefile)
